<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.camcam.product.mapper.ProductMapper">
	<select id="selectRecentProduct">
		select * from products
		order by input_date desc
	</select>
	
	<select id="selectProductList" parameterType="com.camcam.common.SearchVO">
        select r.*
		from(select rownum rn,a.*
				from (select b.*, trunc(b.rating) as trunc_rating ,nvl(s.count_review,0) as review_cnt
					from products b
					left join (select product_no, count(*) as count_review
								from reviews
								group by product_no) s
					on	b.product_no = s.product_no
					where product_name like '%'|| #{keyword} ||'%' or category_code like #{keyword}
					order by b.product_no desc) a
          <![CDATA[
          where rownum <= (#{page} * 12)) r          
          ]]>
		where r.rn > (#{page} -1) * 12
	</select>
	
	<select id="selectProductInfo" parameterType="int" resultType="com.camcam.product.vo.ProductVO">
		select * from products where product_no = #{productNo}
	</select>
	
	<select id="getTotal" resultType="int" parameterType="com.camcam.common.SearchVO">
		select count(1)
		from products
		where product_name like '%'|| #{keyword}||'%' or category_code like #{keyword}
	</select>
	
	<select id="getLikeVal" resultType="com.camcam.product.vo.ProductVO" parameterType="com.camcam.product.vo.ProductVO">
		select count(*) from likes
		where product_no = #{productNo} and user_id = #{userId}
	</select>
	
	<insert id="insertLike" parameterType="com.camcam.product.vo.ProductVO">
		insert into likes (user_id, product_no)
		values (#{userId},#{productNo})
	</insert>
	
	<delete id="deleteLike" parameterType="com.camcam.product.vo.ProductVO">
		delete from likes 
		where user_id = #{userId} and product_no = #{productNo}
	</delete>
<!-- 	<select id="selectCategoryList"> -->
<!-- 		SELECT CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN '대분류' -->
<!--             ELSE ' ' -->
<!--        END AS CATE_1, -->
<!--        CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN CATEGORY_NAME -->
<!--             ELSE ' ' -->
<!--        END AS CATE_2, -->
<!--        CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN ' ' -->
<!--             ELSE '소분류' -->
<!--        END AS CATE_3, -->
<!--        CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN ' ' -->
<!--             ELSE CATEGORY_NAME -->
<!--        END AS CATE_4 -->
<!-- 		FROM CATEGORY C -->
<!-- 		START WITH PRE_CATEGORY IS NULL -->
<!-- 		CONNECT BY PRE_CATEGORY = PRIOR CATEGORY_CODE -->
<!-- 		ORDER SIBLINGS BY CATEGORY_CODE DESC -->
<!-- 	</select> -->
	
	<select id="categoryTemp" resultType="map">
		SELECT CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN 'parent'
            ELSE ''
       END AS CATE_1,
       CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN CATEGORY_NAME
            ELSE ''
       END AS CATE_2,
       CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN ''
            ELSE 'child'
       END AS CATE_3,
       CASE WHEN NVL(PRE_CATEGORY, 'N') = 'N' THEN ''
            ELSE CATEGORY_NAME
       END AS CATE_4,
       CATEGORY_CODE
		FROM CATEGORY C
		START WITH PRE_CATEGORY IS NULL
		CONNECT BY PRE_CATEGORY = PRIOR CATEGORY_CODE
		ORDER SIBLINGS BY CATEGORY_CODE DESC
	</select>
	
	
</mapper>